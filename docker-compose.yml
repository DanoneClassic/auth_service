version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: auth_postgres
    environment:
      POSTGRES_DB: auth_db
      POSTGRES_USER: auth_user
      POSTGRES_PASSWORD: auth_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U auth_user -d auth_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - auth_network

  # FastAPI Application
  auth_service:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: auth_service
    environment:
      - DATABASE_URL=postgresql+asyncpg://auth_user:auth_password@postgres:5432/auth_db
      - SECRET_KEY=your-super-secret-key-change-in-production
      - ACCESS_TOKEN_EXPIRE_MINUTES=15
      - REFRESH_TOKEN_EXPIRE_DAYS=7
      - ALGORITHM=HS256
      - CORS_ORIGINS=["http://localhost:3000","http://localhost:8080"]
      - DEBUG=true
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8000/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - auth_network
    restart: unless-stopped

  # Alembic migrations (runs once)
  migrations:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: auth_migrations
    environment:
      - DATABASE_URL=postgresql+asyncpg://auth_user:auth_password@postgres:5432/auth_db
    command: ["alembic", "upgrade", "head"]
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - auth_network
    restart: "no"

volumes:
  postgres_data:
    driver: local

networks:
  auth_network:
    driver: bridge